'''    抓包工具fiddler的学习
fiddler是一款调试代理的工具，用于记录客户端和服务器之间的所有HTTP的通信数据，可以查看请求报文，设置断点，并支持发送请求。
fiddler可以截取通信数据，对数据进行展示，数据包进行修改

fiddler抓包原理：在客户端和服务端之间设置了一个代理服务器，所有发送给服务器的报文都会经过这个代理服务器

打开fiddler，首次安装需要进行一个设置，点击TOOLS，--options，https的勾選框（两个）都勾上

HTTP（s）：
是一种超文本传输协议，客户端与服务端进行交互的一种协议。客户端发送请求到服务端，服务端响应后回传数据给客户端。
HTTP组成：
请求：请求行（请求方法，请求URL，协议及版本），请求头，请求体
响应：响应行（状态码，状态消息，协议及版本），响应头，响应体

请求头有很多行，其中比较重要的有：
user-agent：显示客户端使用的浏览器名称和版本
content-type：   （显示请求的数据是什么类型）
application / x-www-form-urlencode  表单数据
application /json      json数据   键值段显示

响应行中状态码：
1xx
2xx   代表正常响应
3xx   重定向到另一个页面
4XX   客户端错误    404 文件不存在
5XX   服务端错误

常见到四种请求方法：post,get,delete,put
获取数据：GET，下载图片。。
提交数据：POST    登入账号
删除数据：DELETE
更新资源：PUT

=====================================================
用FIDDLER抓包：
首先打开浏览器输入想要抓包的网址,然后在fiddler中点击inspectors,选择raw,查看请求和响应

设置过滤：用filters过滤无用到数据包
勾选filters复选框--勾选use filter--hosts--showonly following host-- 输入想单独显示的地址，然后点击右上角的actions--run
也可以通过右键标记颜色来突出想看的请求

用fiddler发送请求：
点击composer--输入网址


设置断点：可以修改数据，比如坐标，账户的密码，也可以修改返回结果。
操作：左下角有个all processes  点击旁边的小空白方格，小方格变成红色，设置成功，之后所有的请求在左边列表都会有个红色的标记
还可以通过ruler--Automatic Breakpoints -- before requests(断请求), after respones(断响应)
网站断点成功后，点击run to com可以进行下一动作
设置断点还有另一种方式：
断请求：在左下角断命令行中输入 bpu https: //xxxxx.com
断响应：在左下角断命令行中输入 bpafter https: //xxxxx.com
想要取消断点，清空输入bpu回车


设置弱网：  当功能测试需要测试网络很差的时候会用到弱网功能
操作：
ruler --performance --simulate modem speeds





















'''